# Copyright (C) 2023, Inria
# GRAPHDECO research group, https://team.inria.fr/graphdeco
# All rights reserved.
# 
# This software is free for non-commercial, research and evaluation use 
# under the terms of the LICENSE.md file.
# 
# For inquiries contact sibr@inria.fr and/or George.Drettakis@inria.fr

set(SIBR_PROJECT "gaussian")
# project(sibr_${SIBR_PROJECT} LANGUAGES CXX)

project(sibr_${SIBR_PROJECT} LANGUAGES CUDA CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CUDA_STANDARD 17)


message(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa${CMAKE_CXX_COMPILER_ID})



sibr_gitlibrary(TARGET CudaRasterizer
    GIT_REPOSITORY 	"https://github.com/graphdeco-inria/diff-gaussian-rasterization.git"
    GIT_TAG			"3509be80f83ee30599b23bb3542d45aea2174a03"
)


# sibr_gitlibrary(target CudaRasterizer)

message(aaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb${CMAKE_CXX_COMPILER_ID})

#find_package(CUDAToolkit REQUIRED)
message(aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb${CMAKE_CXX_COMPILER_ID})

#list(APPEND CMAKE_PREFIX_PATH "C:\\code\\libtorch_release")
message(finishaddlistbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb${CMAKE_CXX_COMPILER_ID})

find_package(Torch REQUIRED)
message(abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb${CMAKE_CXX_COMPILER_ID})

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")
message(bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)


#include_directories(${Torch_INCLUDE_DIRS})
message(cccccccccccccccccccccccccccccccccccccccccc)



file(GLOB SOURCES "*.cpp" "*.h" "*.hpp")
source_group("Source Files" FILES ${SOURCES})

file(GLOB SHADERS "shaders/*.frag" "shaders/*.vert" "shaders/*.geom")
source_group("Source Files\\shaders" FILES ${SHADERS})

file(GLOB SOURCES "*.cpp" "*.h" "*.hpp" "shaders/*.frag" "shaders/*.vert" "shaders/*.geom")

## Specify target rules
add_library(${PROJECT_NAME} SHARED ${SOURCES})
message(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)

if (WIN32)
target_link_libraries(${PROJECT_NAME}
	${Boost_LIBRARIES}
	${ASSIMP_LIBRARIES}
	${GLEW_LIBRARIES}
	${OPENGL_LIBRARIES}
	${OpenCV_LIBRARIES}
	${TORCH_LIBRARIES}
	glfw3
	sibr_system
	sibr_view
	sibr_assets
	sibr_renderer
	sibr_basic
	CUDA::cudart
	CudaRasterizer
)
else()
target_link_libraries(${PROJECT_NAME}
	${Boost_LIBRARIES}
	${ASSIMP_LIBRARIES}
	${GLEW_LIBRARIES}
	${OPENGL_LIBRARIES}
	${OpenCV_LIBRARIES}
	${TORCH_LIBRARIES}
	glfw
	sibr_system
	sibr_view
	sibr_assets
	sibr_renderer
	sibr_basic
	CUDA::cudart
	CudaRasterizer
)
endif()

message(ffffffffffffffffffffffffffffffffffffffff)
get_target_property(OUT example-app LINK_LIBRARIES)
message(STATUS ${OUT})

add_definitions( -DSIBR_EXP_ULR_EXPORTS -DBOOST_ALL_DYN_LINK  )

set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER "projects/${SIBR_PROJECT}/renderer")
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 14)

## High level macro to install in an homogen way all our ibr targets
include(install_runtime)
ibr_install_target(${PROJECT_NAME}
    INSTALL_PDB                         ## mean install also MSVC IDE *.pdb file (DEST according to target type)
	SHADERS ${SHADERS}
	RSC_FOLDER ${SIBR_PROJECT}

    #STANDALONE  ${INSTALL_STANDALONE}   ## mean call install_runtime with bundle dependencies resolution
    COMPONENT   ${PROJECT_NAME}_install ## will create custom target to install only this project
)
